#-------------------------------------------------------------------------
#Parser.py -- ATG file parser
#Compiler Generator Coco/R,
#Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
#extended by M. Loeberbauer & A. Woess, Univ. of Linz
#ported from Java to Python by Ronald Longo
#
#This program is free software; you can redistribute it and/or modify it
#under the terms of the GNU General Public License as published by the
#Free Software Foundation; either version 2, or (at your option) any
#later version.
#
#This program is distributed in the hope that it will be useful, but
#WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#for more details.
#
#You should have received a copy of the GNU General Public License along
#with this program; if not, write to the Free Software Foundation, Inc.,
#59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
#As an exception, it is allowed to write an extension of Coco/R that is
#used as a plugin in non-free software.
#
#If not otherwise stated, any source code generated by Coco/R (other than
#Coco/R itself) does not fall under the GNU General Public License.
#-------------------------------------------------------------------------*/

import sys

from Scanner import Token
from Scanner import Scanner
from Scanner import Position

class ErrorRec( object ):
   def __init__( self, l, c, s ):
      self.line   = l
      self.col    = c
      self.num    = 0
      self.str    = s


class Errors( object ):
   errMsgFormat = "file %(file)s : (%(line)d, %(col)d) %(text)s\n"
   eof          = False
   count        = 0         # number of errors detected
   fileName     = ''
   listName     = ''
   mergeErrors  = False
   mergedList   = None      # PrintWriter
   errors       = [ ]
   minErrDist   = 2
   errDist      = minErrDist
      # A function with prototype: f( errorNum=None ) where errorNum is a
      # predefined error number.  f returns a tuple, ( line, column, message )
      # such that line and column refer to the location in the
      # source file most recently parsed.  message is the error
      # message corresponging to errorNum.

   @staticmethod
   def Init( fn, dir, merge, getParsingPos, errorMessages ):
      Errors.theErrors = [ ]
      Errors.getParsingPos = getParsingPos
      Errors.errorMessages = errorMessages
      Errors.fileName = fn
      listName = dir + 'listing.txt'
      Errors.mergeErrors = merge
      if Errors.mergeErrors:
         try:
            Errors.mergedList = open( listName, 'w' )
         except IOError:
            raise RuntimeError( '-- Compiler Error: could not open ' + listName )

   @staticmethod
   def storeError( line, col, s ):
      if Errors.mergeErrors:
         Errors.errors.append( ErrorRec( line, col, s ) )
      else:
         Errors.printMsg( Errors.fileName, line, col, s )

   @staticmethod
   def SynErr( errNum, errPos=None ):
      line,col = errPos if errPos else Errors.getParsingPos( )
      msg = Errors.errorMessages[ errNum ]
      Errors.storeError( line, col, msg )
      Errors.count += 1

   @staticmethod
   def SemErr( errMsg, errPos=None ):
      line,col = errPos if errPos else Errors.getParsingPos( )
      Errors.storeError( line, col, errMsg )
      Errors.count += 1

   @staticmethod
   def Warn( errMsg, errPos=None ):
      line,col = errPos if errPos else Errors.getParsingPos( )
      Errors.storeError( line, col, errMsg )

   @staticmethod
   def Exception( errMsg ):
      print errMsg
      sys.exit( 1 )

   @staticmethod
   def printMsg( fileName, line, column, msg ):
      vals = { 'file':fileName, 'line':line, 'col':column, 'text':msg }
      sys.stdout.write( Errors.errMsgFormat % vals )

   @staticmethod
   def display( s, e ):
      Errors.mergedList.write('**** ')
      for c in xrange( 1, e.col ):
         if s[c-1] == '\t':
            Errors.mergedList.write( '\t' )
         else:
            Errors.mergedList.write( ' ' )
      Errors.mergedList.write( '^ ' + e.str + '\n')

   @staticmethod
   def Summarize( sourceBuffer ):
      if Errors.mergeErrors:
         # Initialize the line iterator
         srcLineIter = iter(sourceBuffer)
         srcLineStr  = srcLineIter.next( )
         srcLineNum  = 1

         try:
            # Initialize the error iterator
            errIter = iter(Errors.errors)
            errRec  = errIter.next( )

            # Advance to the source line of the next error
            while srcLineNum < errRec.line:
               Errors.mergedList.write( '%4d %s\n' % (srcLineNum, srcLineStr) )

               srcLineStr = srcLineIter.next( )
               srcLineNum += 1

            # Write out all errors for the current source line
            while errRec.line == srcLineNum:
               Errors.display( srcLineStr, errRec )

               errRec = errIter.next( )
         except:
            pass

         # No more errors to report
         try:
            # Advance to end of source file
            while True:
               Errors.mergedList.write( '%4d %s\n' % (srcLineNum, srcLineStr) )

               srcLineStr = srcLineIter.next( )
               srcLineNum += 1
         except:
            pass

         Errors.mergedList.write( '\n' )
         Errors.mergedList.write( '%d errors detected\n' % Errors.count )
         Errors.mergedList.close( )

      sys.stdout.write( '%d errors detected\n' % Errors.count )
      if (Errors.count > 0) and Errors.mergeErrors:
         sys.stdout.write( 'see ' + Errors.listName + '\n' )


class Parser( object ):
   _EOF = 0
   _identifier = 1
   _print = 2
   _result = 3
   _assign = 4
   _mul = 5
   _div = 6
   _plu = 7
   _min = 8
   _inc = 9
   _dec = 10
   _blockStart = 11
   _blockEnd = 12
   _if = 13
   _cycleStart = 14
   _cycleEnd = 15
   _comma = 16
   _number = 17
   _newline = 18
   maxT = 20

   T          = True
   x          = False
   minErrDist = 2

   # Create an array of 1000 memory registers
   VARS = [ 0 ] * 1000

   def getSpix( self ):
      varName = self.token.val.upper()   # Grab the most recently parsed lexeme

      if len(varName) >= 2:
         return 26*(ord(varName[1])-ord('A'))+(ord(varName[0])-ord('A'))
      else:
         return ord(varName[0])-ord('A')

   def getNumber( self ):
      return int(self.token.val)

   def newVar( self, spix ):
      self.VARS[ spix ] = 0

   def getVar( self, spix ):
      return self.VARS[ spix ]

   def writeVal( self, val ):
      print(val)

   def setVar( self, spix, val ):
      self.VARS[ spix ] = val

   def shouldWrite(self):
     self._shouldWrite = True

   def writeValIfShould(self, spix):
     if self._shouldWrite:
       self.writeVal(self.getVar(spix))
       self._shouldWrite = False


   def __init__( self ):
      self.scanner     = None
      self.token       = None           # last recognized token
      self.la          = None           # lookahead token
      self.genScanner  = False
      self.tokenString = ''             # used in declarations of literal tokens
      self.noString    = '-none-'       # used in declarations of literal tokens
      self.errDist     = Parser.minErrDist

   def getParsingPos( self ):
      return self.la.line, self.la.col

   def SynErr( self, errNum ):
      if self.errDist >= Parser.minErrDist:
         Errors.SynErr( errNum )

      self.errDist = 0

   def SemErr( self, msg ):
      if self.errDist >= Parser.minErrDist:
         Errors.SemErr( msg )

      self.errDist = 0

   def Warning( self, msg ):
      if self.errDist >= Parser.minErrDist:
         Errors.Warn( msg )

      self.errDist = 0

   def Successful( self ):
      return Errors.count == 0;

   def LexString( self ):
      return self.token.val

   def LookAheadString( self ):
      return self.la.val

   def Get( self ):
      while True:
         self.token = self.la
         self.la = self.scanner.Scan( )
         if self.la.kind <= Parser.maxT:
            self.errDist += 1
            break
         
         self.la = self.token

   def Expect( self, n ):
      if self.la.kind == n:
         self.Get( )
      else:
         self.SynErr( n )

   def StartOf( self, s ):
      return self.set[s][self.la.kind]

   def ExpectWeak( self, n, follow ):
      if self.la.kind == n:
         self.Get( )
      else:
         self.SynErr( n )
         while not self.StartOf(follow):
            self.Get( )

   def WeakSeparator( self, n, syFol, repFol ):
      s = [ False for i in xrange( Parser.maxT+1 ) ]
      if self.la.kind == n:
         self.Get( )
         return True
      elif self.StartOf(repFol):
         return False
      else:
         for i in xrange( Parser.maxT ):
            s[i] = self.set[syFol][i] or self.set[repFol][i] or self.set[0][i]
         self.SynErr( n )
         while not s[self.la.kind]:
            self.Get( )
         return self.StartOf( syFol )

   def ALNG( self ):
      self.GENERALSTATEMENT()
      if (self.StartOf(1)):
         self.GENERALSTATEMENT()

   def GENERALSTATEMENT( self ):
      if self.la.kind == 13 or self.la.kind == 14:
         self.BLOCKSTATEMENT()
      elif self.la.kind == 1 or self.la.kind == 2 or self.la.kind == 3:
         self.LINESTATEMENT()
      else:
         self.SynErr(21)

   def BLOCKSTATEMENT( self ):
      if self.la.kind == 14:
         self.CYCLESTATEMENT()
      elif self.la.kind == 13:
         self.CONDITIONSTATEMENT()
      else:
         self.SynErr(22)

   def LINESTATEMENT( self ):
      if self.la.kind == 3:
         self.RESULTSTATEMENT()
      elif self.la.kind == 1 or self.la.kind == 2:
         self.NONRESULTSTATEMENT()
      else:
         self.SynErr(23)

   def CYCLESTATEMENT( self ):
      self.Expect(14)
      if (self.la.kind == 1 or self.la.kind == 2 or self.la.kind == 3):
         self.LINESTATEMENT()
      self.Expect(16)
      if (self.la.kind == 3):
         self.RESULTSTATEMENT()
      self.Expect(16)
      if (self.la.kind == 1 or self.la.kind == 2 or self.la.kind == 3):
         self.LINESTATEMENT()
      self.Expect(15)
      self.Expect(11)
      self.GENERALSTATEMENT()
      self.Expect(12)

   def CONDITIONSTATEMENT( self ):
      self.Expect(13)
      self.RESULTSTATEMENT()
      self.Expect(11)
      self.GENERALSTATEMENT()
      self.Expect(12)

   def RESULTSTATEMENT( self ):
      self.Expect(3)
      val = self.LOWEXPR()
      self.Expect(18)

   def NONRESULTSTATEMENT( self ):
      while self.la.kind == 2:
         self.Get( )
         self.shouldWrite() 

      spix = self.IDENTIFIER()
      self.Expect(4)
      val = self.LOWEXPR()
      self.setVar(spix, val)  
      self.Expect(18)
      self.writeValIfShould(spix) 

   def LOWEXPR( self ):
      exprVal = self.HIGHEXPR()
      while self.la.kind == 7 or self.la.kind == 8:
         if self.la.kind == 7:
            self.Get( )
            termVal = self.HIGHEXPR()
            exprVal += termVal 
         else:
            self.Get( )
            termVal = self.HIGHEXPR()
            exprVal -= termVal 

      return exprVal

   def IDENTIFIER( self ):
      self.Expect(1)
      spix = self.getSpix()   
      return spix

   def HIGHEXPR( self ):
      termVal = self.VALUE()
      while self.la.kind == 5 or self.la.kind == 6:
         if self.la.kind == 5:
            self.Get( )
            factVal = self.VALUE()
            termVal *= factVal 
         else:
            self.Get( )
            factVal = self.VALUE()
            termVal /= factVal 

      return termVal

   def VALUE( self ):
      if self.la.kind == 1:
         spix = self.IDENTIFIER()
         factVal = self.getVar(spix) 
      elif self.la.kind == 17:
         self.Get( )
         factVal = self.getNumber()  
      elif self.la.kind == 19:
         self.Get( )
         factVal = self.LOWEXPR()
         self.Expect(15)
      else:
         self.SynErr(24)
      return factVal



   def Parse( self, scanner ):
      self.scanner = scanner
      self.la = Token( )
      self.la.val = u''
      self.Get( )
      self.ALNG()
      self.Expect(0)


   set = [
      [T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x],
      [x,T,T,T, x,x,x,x, x,x,x,x, x,T,T,x, x,x,x,x, x,x]

      ]

   errorMessages = {
      
      0 : "EOF expected",
      1 : "identifier expected",
      2 : "print expected",
      3 : "result expected",
      4 : "assign expected",
      5 : "mul expected",
      6 : "div expected",
      7 : "plu expected",
      8 : "min expected",
      9 : "inc expected",
      10 : "dec expected",
      11 : "blockStart expected",
      12 : "blockEnd expected",
      13 : "if expected",
      14 : "cycleStart expected",
      15 : "cycleEnd expected",
      16 : "comma expected",
      17 : "number expected",
      18 : "newline expected",
      19 : "\"(\" expected",
      20 : "??? expected",
      21 : "invalid GENERALSTATEMENT",
      22 : "invalid BLOCKSTATEMENT",
      23 : "invalid LINESTATEMENT",
      24 : "invalid VALUE",
      }


