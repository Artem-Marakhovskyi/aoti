COMPILER ALNG
# Create an array of 1000 memory registers
   VARS = [ 0 ] * 1000

   def getSpix( self ):
      varName = self.token.val.upper()   # Grab the most recently parsed lexeme

      if len(varName) >= 2:
         return 26*(ord(varName[1])-ord('A'))+(ord(varName[0])-ord('A'))
      else:
         return ord(varName[0])-ord('A')

   def getNumber( self ):
      return float(self.token.val)

   def newVar( self, spix ):
      self.VARS[ spix ] = 0

   def getVar( self, spix ):
      return self.VARS[ spix ]

   def writeVal( self, val ):
      print(val)

   def setVar( self, spix, val ):
      self.VARS[ spix ] = val

   def shouldWrite(self):
     self._shouldWrite = True

   def writeValIfShould(self, spix):
     if self._shouldWrite:
       self.writeVal(self.getVar(spix))
       self._shouldWrite = False

IGNORECASE
CHARACTERS
    digit = '0'..'9'.
    varname = 'a'..'z'.
    space = ' '.
    letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
    tab = CHR(9) .
    eol = CHR(10) .
    ret = CHR(13) .

TOKENS
    identifier  = letter {letter | digit} .
    print = "out" .
    result = "<-" .
    assign = "assign" .
        // arithmetical operations
    mul = "mul" .
    div = "div" .
    plu = "plu" .
    min = "minus" .
    inc = "inc" .
    dec = "dec" .
        // block
    blockStart = "begin" .
    blockEnd = "end" .
        // condition
    if = "cond" .
        // cycle
    cycleStart = "cycle(" | ("cycle" [space] "(") .
    cycleEnd = ")" .
    comma = "," .
        // elements
    number = digit {digit} '.' digit {digit} ['E' ['+' | '-'] digit {digit}] .
    newline = "nl" .

COMMENTS FROM "--" TO eol
COMMENTS FROM "/*" TO "*/"

IGNORE eol + ret + tab


PRODUCTIONS

    ALNG
        = GENERALSTATEMENT
        [ GENERALSTATEMENT ] .

    GENERALSTATEMENT
        = BLOCKSTATEMENT
        | LINESTATEMENT .

    BLOCKSTATEMENT
        = CYCLESTATEMENT
        | CONDITIONSTATEMENT .

    LINESTATEMENT
        = RESULTSTATEMENT
        | NONRESULTSTATEMENT .

    CYCLESTATEMENT
        = cycleStart
        [ LINESTATEMENT ] comma
        [ RESULTSTATEMENT ] comma
        [ LINESTATEMENT ] cycleEnd
        blockStart
        GENERALSTATEMENT
        blockEnd .

    CONDITIONSTATEMENT
        = if
        RESULTSTATEMENT
        blockStart
        GENERALSTATEMENT
        blockEnd .

    RESULTSTATEMENT
        =
        result
        LOWEXPR<out val>
        newline .

    NONRESULTSTATEMENT
      =
        { print (. self.shouldWrite() .) }
        IDENTIFIER<out spix>
        assign LOWEXPR<out val> (. self.setVar(spix, val)  .)
        newline (. self.writeValIfShould(spix) .)
      .

    LOWEXPR<out exprVal>
      =
        HIGHEXPR<out exprVal>
        {  plu HIGHEXPR<out termVal>            (. exprVal += termVal .)
        |  min HIGHEXPR<out termVal>            (. exprVal -= termVal .)
        }
      .

    HIGHEXPR<out termVal>
      =
        VALUE<out termVal>
        {  mul VALUE<out factVal>            (. termVal *= factVal .)
        |  div VALUE<out factVal>            (. termVal /= factVal .)
        }
      .

    VALUE<out factVal>
      =
        IDENTIFIER<out spix>                  (. factVal = self.getVar(spix) .)
        |  number                           (. factVal = self.getNumber()  .)
        | '(' LOWEXPR<out factVal> ')'
      .

    IDENTIFIER<out spix>
      = identifier                           (. spix = self.getSpix()   .)
      .

//  Expression           = Conditional { AssignmentOperator Expression }.
//
//  Conditional          = LogORExp .
//
//  LogORExp             = LogANDExp   { "||" LogANDExp } .
//
//  LogANDExp            = InclORExp   { "&&" InclORExp }.
//
//  InclORExp            = ExclORExp   { "|" ExclORExp } .
//
//  ExclORExp            = ANDExp      { "^" ANDExp } .
//
//  ANDExp               = EqualExp    { "&" EqualExp } .
//
//  EqualExp             = RelationExp { ( "==" | "!=" ) RelationExp } .
//
//  RelationExp          = ShiftExp    { ( "<" | ">" | "<=" | ">=" ) ShiftExp }.
//
//  ShiftExp             = AddExp      { ( "<<" | ">>" ) AddExp } .
//
//  AddExp               = MultExp     { ( "+" | "-" ) MultExp } .
//
//  MultExp              = CastExp     { ( "*" | "/" | "%" ) CastExp } .
//
//  CastExp              = UnaryExp .
//
END ALNG.



